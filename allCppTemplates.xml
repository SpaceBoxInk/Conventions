<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="()">${cursor}(${word_selection})</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.comment" deleted="false" description="author name" enabled="true" id="org.eclipse.cdt.ui.text.templates.comment.author" name="author">author ${user}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="case">case ${var}:
		${cursor}
		break;</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="catch block" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.catch" name="catch">catch (${Exception} e) {
	${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="class declaration" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.class" name="class">class ${name} {
public:
    ${name}();
    virtual ~${name}();
	${cursor}
private:
    
};</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="default multiline comment" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.comment" name="comment">
/*
 * author ${user}
 *
 * To change this generated comment edit the template variable "comment":
 * Window &gt; Preferences &gt; C/C++ &gt; Editor &gt; Templates.
 */
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="define">#define ${cursor}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="do while statement" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.do" name="do">do {
	${line_selection}${cursor}
} while (${condition});</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="else block" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.else" name="else">else {
	${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="else if block" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.elseif" name="elseif">else if (${condition}) {
	${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="for loop" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.for" name="for">for (${var} = ${0}; ${var} &lt; ${max}; ++${var}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="for loop with temporary variable" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.for" name="for">for (int ${i} = ${0}; ${i} &lt; ${max}; ++${i}) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="foreach">for(${Type} ${var} : ${contener}) {
	${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="function">${return_type} ${name}(${param})${cursor};</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="headerTemplate">#ifndef ${file_base}_HPP_
#define ${file_base}_HPP_

template &lt;class ${cursor}&gt;
class ${file_base} {
//-------------------Attributes
private:

//-------------------Constructors
public:
	${file_base}();
	// ${file_base}(${file_base} const&amp; o);
	// ${file_base}(${file_base}&amp;&amp; o);
	// friend void swap(${file_base}&amp; first, ${file_base}&amp; second);
	// ${file_base}&amp; operator=(${file_base} o);
	virtual ~${file_base}();

private:

//-------------------Methods
public:

private:

//-------------------Getters&amp;Setters
public:

private:

};

#include "${file_base}.hpp"
#endif /* ${include_guard_symbol} */</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="if statement" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.if" name="if">if (${condition}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="if single line" enabled="true" name="if">if (${condition})
	${line_selection}${cursor}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="if else statement" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.ifelse" name="ifelse">if (${condition}) {
	${cursor}
} else {
	
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="ifelse single line" enabled="true" name="ifelse">if (${condition})
	${cursor}
else</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="include system" enabled="true" name="include&lt;">#include &lt;${cursor}&gt;</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="include project" enabled="true" name="includep">#include "${cursor}"</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="include" enabled="true" name="iostream">#include &lt;iostream&gt;</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="main method" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.main" name="main">int main(int argc, char **argv) {
	${cursor}
}
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="namespace declaration" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.namespace" name="namespace">namespace ${name} {

${cursor}

}  // namespace ${name}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="create new object" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.new" name="new">${type} ${name} = new ${type}(${arguments});</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="null">nullptr</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="to overload &lt;&lt; operator" enabled="true" name="operator&lt;&lt;">friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; output, ${file_base} const&amp; var);</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="to overload &gt;&gt; operator" enabled="true" name="operator&gt;&gt;">friend std::istream&amp; operator&gt;&gt;(std::istream&amp; input, ${file_base}&amp; var);</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="the copy and swap idiom (rule of five)" enabled="true" name="ruleofFive">${file_base}(${file_base} const&amp; o);
${file_base}(${file_base}&amp;&amp; o);
friend void swap(${file_base}&amp; first, ${file_base}&amp; second);
${file_base}&amp; operator=(${file_base} o);
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="separators">//------------------------------------------------------------
//========================&gt;Constants&lt;=========================
//------------------------------------------------------------

//------------------------------------------------------------
//=======================&gt;Constructors&lt;=======================
//------------------------------------------------------------

//------------------------------------------------------------
//=========================&gt;Methods&lt;==========================
//------------------------------------------------------------

//------------------------------------------------------------
//=====================&gt;Getters&amp;Setters&lt;======================
//------------------------------------------------------------</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="sourceTemplate">#ifdef ${file_base}_HPP_

#endif</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="print to standard error" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.fprintf" name="stderr">fprintf(stderr, ${cursor});</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="print to standard output" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.printf" name="stdout">printf(${cursor});</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="struct">typedef struct ${Name} {
	${cursor}
} ${Name};</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="switch case statement" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.switch" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break;
	default:
		break;
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="try catch block" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.try" name="try">try {
	${line_selection}${cursor}
} catch (${Exception} e) {
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestCpp">#include "${file_base}.hpp"
#include &lt;cppunit/extensions/AutoRegisterSuite.h&gt;

CPPUNIT_TEST_SUITE_REGISTRATION(${file_base});
</template><template autoinsert="false" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestHpp">#include &lt;cppunit/extensions/HelperMacros.h&gt;
#include &lt;cppunit/Portability.h&gt;
#include &lt;cppunit/TestCaller.h&gt;
#include &lt;cppunit/TestFixture.h&gt;
#include &lt;cppunit/TestAssert.h&gt;
#include &lt;cppunit/TestSuite.h&gt;

class ${file_base} : public CPPUNIT_NS::TestFixture {
// Utilisation de MACROS pour définir en quoi consiste la suite de tests
CPPUNIT_TEST_SUITE(${file_base}); // déclaration d'une suite de tests
CPPUNIT_TEST(${firstTest}); // ajout d'un test à la suite
CPPUNIT_TEST_SUITE_END(); // fin de la suite de tests
public:
${file_base}();
virtual ~${file_base}();
void setUp(); // utilisé pour initialiser des données communes aux tests
void tearDown(); // utilisé pour "nettoyer" les données communes
private:
void ${firstTest}(); // pour tester le constructeur de la classe Monnaie
};
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestMain">#include &lt;cppunit/BriefTestProgressListener.h&gt;
#include &lt;cppunit/CompilerOutputter.h&gt;
#include &lt;cppunit/extensions/TestFactoryRegistry.h&gt;
#include &lt;cppunit/portability/Stream.h&gt;
#include &lt;cppunit/Portability.h&gt;
#include &lt;cppunit/TestResult.h&gt;
#include &lt;cppunit/TestResultCollector.h&gt;
#include &lt;cppunit/TestRunner.h&gt;


using namespace std;


int main() {
// Create the event manager and test controller
    CPPUNIT_NS::TestResult controller;
// Add a listener that collects test result
    CPPUNIT_NS::TestResultCollector result;
    controller.addListener(&amp;result);
// Add a listener that print dots as test run.
    CPPUNIT_NS::BriefTestProgressListener progress;
    controller.addListener(&amp;progress);
// Add the top suite to the test runner
    CPPUNIT_NS::TestRunner runner;
    runner.addTest(CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest());
    runner.run(controller);
// Print test in a compiler compatible format.
    CPPUNIT_NS::CompilerOutputter outputter(&amp;result, CPPUNIT_NS::stdCOut());
    outputter.write();
    return result.wasSuccessful() ? 0 : 1;
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="upc_forall loop" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.upc_forall" name="upc_forall">upc_forall (${var} = 0; ${var} &lt; THREADS; ${var}++; ${var}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="UPC_MAX_BLOCKSIZE keyword" enabled="true" id="org.eclipse.cdt.ui.text.templates.c.upc_max_blocksize" name="upc_max_blocksize">UPC_MAX_BLOCKSIZE</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="using a namespace" enabled="true" id="org.eclipse.cdt.ui.text.templates.cpp.using" name="using">using namespace ${name};
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="what">virtual char const* what() const noexcept;</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="while">while(${Condition}){
	${cursor}
}</template></templates>