<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestCpp">#include "${file_base}.hpp"
#include &lt;cppunit/extensions/AutoRegisterSuite.h&gt;

CPPUNIT_TEST_SUITE_REGISTRATION(${file_base});
</template><template autoinsert="false" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestHpp">#include &lt;cppunit/extensions/HelperMacros.h&gt;
#include &lt;cppunit/Portability.h&gt;
#include &lt;cppunit/TestCaller.h&gt;
#include &lt;cppunit/TestFixture.h&gt;
#include &lt;cppunit/TestAssert.h&gt;
#include &lt;cppunit/TestSuite.h&gt;

class ${file_base} : public CPPUNIT_NS::TestFixture {
// Utilisation de MACROS pour définir en quoi consiste la suite de tests
CPPUNIT_TEST_SUITE(${file_base}); // déclaration d'une suite de tests
CPPUNIT_TEST(${firstTest}); // ajout d'un test à la suite
CPPUNIT_TEST_SUITE_END(); // fin de la suite de tests
public:
${file_base}();
virtual ~${file_base}();
void setUp(); // utilisé pour initialiser des données communes aux tests
void tearDown(); // utilisé pour "nettoyer" les données communes
private:
void ${firstTest}(); // pour tester le constructeur de la classe Monnaie
};
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.templates.c" deleted="false" description="" enabled="true" name="unitTestMain">#include &lt;cppunit/BriefTestProgressListener.h&gt;
#include &lt;cppunit/CompilerOutputter.h&gt;
#include &lt;cppunit/extensions/TestFactoryRegistry.h&gt;
#include &lt;cppunit/portability/Stream.h&gt;
#include &lt;cppunit/Portability.h&gt;
#include &lt;cppunit/TestResult.h&gt;
#include &lt;cppunit/TestResultCollector.h&gt;
#include &lt;cppunit/TestRunner.h&gt;


using namespace std;


int main() {
// Create the event manager and test controller
    CPPUNIT_NS::TestResult controller;
// Add a listener that collects test result
    CPPUNIT_NS::TestResultCollector result;
    controller.addListener(&amp;result);
// Add a listener that print dots as test run.
    CPPUNIT_NS::BriefTestProgressListener progress;
    controller.addListener(&amp;progress);
// Add the top suite to the test runner
    CPPUNIT_NS::TestRunner runner;
    runner.addTest(CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest());
    runner.run(controller);
// Print test in a compiler compatible format.
    CPPUNIT_NS::CompilerOutputter outputter(&amp;result, CPPUNIT_NS::stdCOut());
    outputter.write();
    return result.wasSuccessful() ? 0 : 1;
}</template></templates>